!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSUME_ALIGNED	tools.hpp	18;"	d
ASSUME_ALIGNED	tools.hpp	20;"	d
Neighborhood	neighborhood.cpp	/^typedef std::map<std::size_t, std::map<std::size_t, float>> Neighborhood;$/;"	t	file:
calculate_densities	density.cpp	/^std::vector<float> calculate_densities(const std::vector<std::size_t>& pops) {$/;"	f
calculate_densities	density_clustering.cpp	/^calculate_densities(const std::vector<std::size_t>& pops) {$/;"	f
calculate_density_histogram	density.cpp	/^std::vector<float> calculate_density_histogram(const std::vector<float>& dens,$/;"	f
calculate_neighborhood	neighborhood.cpp	/^void calculate_neighborhood(const std::vector<float>& coords,$/;"	f
calculate_populations	density.cpp	/^std::vector<std::size_t> calculate_populations(const std::string& neighborhood, const std::string& projections) {$/;"	f
calculate_populations	density_clustering.cpp	/^calculate_populations(const float* coords,$/;"	f
compute_sigma2	density_clustering.cpp	/^compute_sigma2(const Neighborhood& nh) {$/;"	f
density_clustering	density.cpp	/^std::vector<std::size_t> density_clustering(std::vector<float> dens,$/;"	f
density_clustering	density_clustering.cpp	/^density_clustering(const std::vector<float>& dens,$/;"	f
free_coords	tools.hxx	/^free_coords(NUM* coords) {$/;"	f
high_density_neighborhood	density_clustering.cpp	/^high_density_neighborhood(const float* coords,$/;"	f
log	density_clustering.cpp	/^std::ostream& log(std::ostream& s) {$/;"	f	namespace:__anon1
main	density.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	density_clustering.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	neighborhood.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test_read_coords.cpp	/^int main() {$/;"	f
nearest_neighbor	density.cpp	/^const std::pair<std::size_t, float> nearest_neighbor(const std::vector<float>& coords,$/;"	f
nearest_neighbor	density_clustering.cpp	/^nearest_neighbor(const float* coords,$/;"	f
nearest_neighbors	density_clustering.cpp	/^nearest_neighbors(const float* coords,$/;"	f
read_coords	tools.hxx	/^read_coords(std::string filename, std::vector<std::size_t> usecols) {$/;"	f
sorted_densities	density_clustering.cpp	/^sorted_densities(const std::vector<float>& dens) {$/;"	f
verbose	density_clustering.cpp	/^bool verbose = false;$/;"	m	namespace:__anon1	file:
