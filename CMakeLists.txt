cmake_minimum_required (VERSION 2.8)
project (cluster) 

# Gnu compiler setup
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  message("using Gnu compiler")
  set (CMAKE_CXX_FLAGS "-std=c++0x -ftree-vectorize -ffast-math -O3 -fopenmp -Wall -Wextra -Wno-unknown-pragmas -Wmissing-declarations")
  if (DC_NATIVE_COMPILATION)
    message("native compilation: this code will ONLY run on THIS machine")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
  endif()
  set (DC_MEM_ALIGNMENT 32)
  if (DC_CPU_ACCELERATION)
    if (${DC_CPU_ACCELERATION} STREQUAL "SSE2")
      message("using SSE2")
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
      set (DC_MEM_ALIGNMENT 16)

    elseif (${DC_CPU_ACCELERATION} STREQUAL "SSE4_1")
      message("using SSE4_1")
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")
      set (DC_MEM_ALIGNMENT 16)

    elseif (${DC_CPU_ACCELERATION} STREQUAL "SSE4_2")
      message("using SSE4_2")
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2")
      set (DC_MEM_ALIGNMENT 16)

    elseif (${DC_CPU_ACCELERATION} STREQUAL "AVX")
      message("using AVX")
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx")
      set (DC_MEM_ALIGNMENT 32)
    else()
      message(SEND_ERROR "unknown instruction set: ${DC_CPU_ACCELERATION}")
    endif()
  else()
    message("using standard CPU acceleration with memory aligned at ${DC_MEM_ALIGNMENT} bytes")
  endif()

# Intel compiler setup
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
  message("using Intel compiler")
  set (CMAKE_CXX_FLAGS "-std=c++11 -openmp -xAVX -vec-report=1 -O3")
  set (DC_MEM_ALIGNMENT 32)
endif()

if (DC_USE_OPENCL)
  set (DC_USE_OPENCL "#define DC_USE_OPENCL")
  set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}")
  find_package(OpenCL REQUIRED)
  include_directories(${OPENCL_INCLUDE_DIRS})
  if( OPENCL_HAS_CPP_BINDINGS )
  	message( "OpenCL has CPP bindings. Full include is: " ${OPENCL_INCLUDE_DIRS} )
  else( OPENCL_HAS_CPP_BINDINGS )
  	message( "No OpenCL CPP bindings found" )
  endif( OPENCL_HAS_CPP_BINDINGS )
  include_directories("${CMAKE_SOURCE_DIR}")
else()
  set (DC_USE_OPENCL "")
endif(DC_USE_OPENCL)


find_package (Boost 1.49 COMPONENTS program_options REQUIRED)
include_directories (${Boost_INCLUDE_DIR})

configure_file(config.hpp.cmake.in ${CMAKE_BINARY_DIR}/generated/config.hpp)
include_directories(${CMAKE_BINARY_DIR}/generated/)

if (DC_USE_OPENCL)
  add_executable(cluster cluster.cpp density_clustering.cpp density_clustering_opencl.cpp mpp.cpp tools.cpp)
  target_link_libraries(cluster ${Boost_LIBRARIES} ${OPENCL_LIBRARIES})
else()
  add_executable(cluster cluster.cpp density_clustering.cpp mpp.cpp tools.cpp)
  target_link_libraries(cluster ${Boost_LIBRARIES})
endif()

add_executable(network_builder network_builder.cpp tools.cpp)
target_link_libraries(network_builder ${Boost_LIBRARIES})

