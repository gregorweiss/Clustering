{"name":"Clustering","tagline":"Robust and stable clustering of molecular dynamics simulation trajectories.","body":"\r\n\r\n\r\nThis software package provides extensive tools for robust and stable clustering of molecular dynamics trajectories.\r\nThe essential functions are:\r\n  - density-based geometric clustering for microstate generation\r\n  - dynamic clustering based on the Most-Probable-Path algorithm (MPP)\r\n  - variable dynamic coring for boundary corrections\r\n\r\nAdditionally, the package includes tools to efficiently filter original coordinates or order parameters based on a discrete state definition\r\nto identify representative structures and variables of clusters.\r\n\r\nComputationally demanding functions are parallelized in a hybrid model using OpenMP for SMP parallelization on a single node (multithreading)\r\nand MPI over different cluster nodes. MPI support, however, is optional and for a modern computer with a high number of fast cores or\r\neven multiple CPUs, OpenMP parallelization is sufficiently fast.\r\n\r\n\r\n# Citations\r\nThe underlying methods are based on the following articles:\r\n  - A. Jain and G. Stock, *Hierarchical folding free energy landscape of HP35 revealed by most probable path clustering*,\r\n    J. of Phys. Chem. B, 118, 7750 - 7760, 2014; DOI: 10.1021/jp410398a\r\n  - F. Sittel and G. Stock, *Robust Density-Based Clustering to Identify Metastable Conformational States of Proteins*\r\n    (**unpublished draft title**; please re-check [our group website](http://www.moldyn.uni-freiburg.de/publications/Publikationen.html) for the published article)\r\n\r\nWe kindly ask you to cite these articles if you use this software package for published works.\r\n\r\n\r\n# Licensing\r\nCopyright (c) 2015, [Florian Sittel](http://www.lettis.net)\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification,\r\nare permitted provided that the following conditions are met:\r\n\r\n1. Redistributions of source code must retain the above copyright notice,\r\n   this list of conditions and the following disclaimer.\r\n\r\n2. Redistributions in binary form must reproduce the above copyright notice,\r\n   this list of conditions and the following disclaimer in the documentation\r\n   and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\r\nSHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\r\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\r\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n\r\n\r\n# Installation\r\n## Requirements\r\n required:\r\n  -  **BOOST >= 1.49**\r\n  -  **cmake >= 2.8**\r\n  -  a **recent** C++ compiler (e.g. GNU g++ 4.9 or Intel icpc 15, must support C++11 standard)\r\n\r\n optional:\r\n  - doxygen (to build the API docs)\r\n  - MPI (for parallelized execution on clusters)\r\n\r\n## Quick-Start\r\n\r\nTo quickly get a working (but possibly underperforming) binary\r\n\r\n  - unpack the code ...\r\n\r\n      \\# tar xfz clustering_VERSION.tar.gz\r\n\r\n  - create a build folder inside the code directory ...\r\n\r\n      \\# cd clustering_VERSION\r\n\r\n      \\# mkdir build\r\n\r\n  - change to the build directory ...\r\n\r\n      \\# cd build\r\n\r\n  - ... and run cmake\r\n\r\n      \\# cmake .. -DCMAKE_INSTALL_PREFIX=/my/installation/path\r\n\r\n  - then compile and install the package to /my/installation/path (or any other path you chose above) by invoking\r\n\r\n      \\# make\r\n\r\n      \\# make install\r\n\r\n\r\n## Optimized Binaries and Custom Build Options\r\n\r\n### Vectorization\r\nIf you have a modern computer with vectorizing instruction sets (SSE2, SSE4_2, AVX, ...),\r\nset the following **cmake-option**: -DDC_CPU_ACCELERATION=<OPTION>, where <OPTION> is one of\r\n  - SSE2\r\n  - SSE4_1\r\n  - SSE4_2\r\n  - AVX\r\n\r\nIt is important to select an option that is actually supported by your machine.\r\nOtherwise the program will produce erratic results, crash or not compile at all.\r\nOn linux systems, you can check your computer's capabilities with\r\n\r\n      # cat /proc/cpuinfo\r\n\r\nCheck in the *flags:*-block, if a certain instruction set is supported.\r\nIf it is not listed, it is not supported.\r\n\r\n### Native Compilation\r\nTo compile the code with '-march=native' option (specific to the GNU compiler), add '-DDC_NATIVE_COMPILATION=ON' to your cmake-flags.\r\nUsing this option, the GNU compiler will automatically use all available instruction sets for optimal performance (**attention**: you still\r\nneed to set the vectorization option above, even if you use this option).\r\n\r\nUnfortunately, the resulting binary will most likely run only on the computer it was compiled on - do **not** use this option if you want\r\nto distribute the binary, e.g. on a cluster.\r\n\r\n### MPI\r\nFor MPI support, build your binary with the additional cmake-flag -DDC_USE_MPI=ON.\r\nInvoke the *clustering_mpi* binary in the following way to run on several nodes with local multithreading via OpenMP:\r\n\r\n     # /usr/bin/mpirun -n N_NODES -bind-to-core -bynode -cpus-per-proc N_THREADS_PER_NODE -report-bindings  \\\r\n          clustering_mpi density -f COORDS_FILE -r RADIUS -p POPS_OUT -d FE_OUT -n N_THREADS_PER_NODE\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}